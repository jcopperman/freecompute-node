version: '3.8'

services:
  # Nginx Web Server (Dashboard)
  nginx:
    image: nginx:alpine
    container_name: freecompute-nginx
    restart: unless-stopped
    volumes:
      - ../services/dashboard:/usr/share/nginx/html:ro
      - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "${NGINX_PORT:-80}:80"
    depends_on:
      - minio
    networks:
      - freecompute
    labels:
      - "freecompute.service=nginx"
      - "freecompute.node=${NODE_NAME:-freecompute-node}"

  # MinIO Object Storage
  minio:
    image: minio/minio:latest
    container_name: freecompute-minio
    restart: unless-stopped
    command: server --console-address ":${MINIO_CONSOLE_PORT}" /data
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
    ports:
      - "${MINIO_PORT}:9000"
      - "${MINIO_CONSOLE_PORT}:${MINIO_CONSOLE_PORT}"
    volumes:
      - ./data/minio:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - freecompute
    labels:
      - "freecompute.service=minio"
      - "freecompute.node=${NODE_NAME:-freecompute-node}"
      
  # Router Service (API Gateway for mesh networking)
  router:
    build:
      context: ../services/router
      dockerfile: Dockerfile
    container_name: freecompute-router
    restart: unless-stopped
    environment:
      - NODE_NAME=${NODE_NAME:-freecompute-node}
      - NODE_ROLE=${NODE_ROLE:-general}
      - ROUTER_PORT=${ROUTER_PORT:-8090}
      - ROUTER_AUTH_KEY=${ROUTER_AUTH_KEY:-change_this_key}
      - HEALTH_CHECK_INTERVAL=${HEALTH_CHECK_INTERVAL:-30000}
      - NGINX_PORT=${NGINX_PORT:-8080}
      - MINIO_PORT=${MINIO_PORT:-9002}
      - MINIO_CONSOLE_PORT=${MINIO_CONSOLE_PORT:-9003}
      - MINIO_ENABLED=${MINIO_ENABLED:-true}
      - OLLAMA_PORT=${OLLAMA_PORT:-11435}
      - OLLAMA_ENABLED=${OLLAMA_ENABLED:-false}
      - MESH_ENABLED=${MESH_ENABLED:-false}
      - MESH_HUB=${MESH_HUB:-}
      - MESH_TOKEN=${MESH_TOKEN:-}
      - PROMETHEUS_ENABLED=true
      - LOKI_ENABLED=${LOKI_ENABLED:-true}
      - LOKI_HOST=loki
      - LOKI_PORT=${LOKI_PORT:-3100}
    ports:
      - "${ROUTER_PORT:-8090}:${ROUTER_PORT:-8090}"
    volumes:
      - ../services/router:/app
      - /app/node_modules
    depends_on:
      - nginx
      - minio
    networks:
      - freecompute
    labels:
      - "freecompute.service=router"
      - "freecompute.node=${NODE_NAME:-freecompute-node}"

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: freecompute-prometheus
    restart: unless-stopped
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./prometheus:/etc/prometheus
      - ./data/prometheus:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - freecompute
    labels:
      - "freecompute.service=prometheus"
      - "freecompute.node=${NODE_NAME:-freecompute-node}"

  # Node Exporter for System Metrics
  node-exporter:
    image: prom/node-exporter:latest
    container_name: freecompute-node-exporter
    restart: unless-stopped
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($$|/)'
    ports:
      - "9100:9100"
    networks:
      - freecompute
    labels:
      - "freecompute.service=node-exporter"
      - "freecompute.node=${NODE_NAME:-freecompute-node}"

  # Loki Log Aggregation
  loki:
    image: grafana/loki:2.9.3
    container_name: freecompute-loki
    restart: unless-stopped
    ports:
      - "${LOKI_PORT:-3100}:3100"
    volumes:
      - ./loki:/etc/loki
      - ./data/loki:/loki
    command: -config.file=/etc/loki/loki-config.yml
    networks:
      - freecompute
    labels:
      - "freecompute.service=loki"
      - "freecompute.node=${NODE_NAME:-freecompute-node}"

  # Promtail Log Collection
  promtail:
    image: grafana/promtail:2.9.3
    container_name: freecompute-promtail
    restart: unless-stopped
    volumes:
      - ./promtail:/etc/promtail
      - /var/log:/var/log
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
    command: -config.file=/etc/promtail/promtail-config.yml
    networks:
      - freecompute
    labels:
      - "freecompute.service=promtail"
      - "freecompute.node=${NODE_NAME:-freecompute-node}"
    depends_on:
      - loki

  # cAdvisor Container Metrics
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.2
    container_name: freecompute-cadvisor
    restart: unless-stopped
    privileged: true
    ports:
      - "${CADVISOR_PORT:-8081}:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    networks:
      - freecompute
    labels:
      - "freecompute.service=cadvisor"
      - "freecompute.node=${NODE_NAME:-freecompute-node}"

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: freecompute-grafana
    restart: unless-stopped
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    volumes:
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./data/grafana:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-FreeCompute2024!Secure}
      - GF_USERS_ALLOW_SIGN_UP=false
    networks:
      - freecompute
    labels:
      - "freecompute.service=grafana"
      - "freecompute.node=${NODE_NAME:-freecompute-node}"
    depends_on:
      - prometheus
      - loki

  # Nginx Metrics Exporter
  nginx-exporter:
    image: nginx/nginx-prometheus-exporter:latest
    container_name: freecompute-nginx-exporter
    restart: unless-stopped
    command:
      - '-nginx.scrape-uri=http://nginx:80/nginx_status'
    ports:
      - "9113:9113"
    networks:
      - freecompute
    labels:
      - "freecompute.service=nginx-exporter"
      - "freecompute.node=${NODE_NAME:-freecompute-node}"
    depends_on:
      - prometheus
      - nginx

# MONITORING SECTION ADDED
  # Monitoring Stack
  prometheus:
    image: prom/prometheus:latest
    container_name: freecompute-prometheus
    restart: unless-stopped
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./monitoring/prometheus:/etc/prometheus
      - ./data/prometheus:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - freecompute
    labels:
      - "freecompute.service=prometheus"
      - "freecompute.node=${NODE_NAME:-freecompute-node}"

  loki:
    image: grafana/loki:2.9.3
    container_name: freecompute-loki
    restart: unless-stopped
    ports:
      - "3100:3100"
    volumes:
      - ./monitoring/loki:/etc/loki
      - ./data/loki:/loki
    command: -config.file=/etc/loki/loki-config.yml
    networks:
      - freecompute
    labels:
      - "freecompute.service=loki"
      - "freecompute.node=${NODE_NAME:-freecompute-node}"

  grafana:
    image: grafana/grafana:latest
    container_name: freecompute-grafana
    restart: unless-stopped
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    volumes:
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./data/grafana:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-FreeCompute2024!Secure}
      - GF_USERS_ALLOW_SIGN_UP=false
    networks:
      - freecompute
    labels:
      - "freecompute.service=grafana"
      - "freecompute.node=${NODE_NAME:-freecompute-node}"
    depends_on:
      - prometheus
      - loki

  promtail:
    image: grafana/promtail:2.9.3
    container_name: freecompute-promtail
    restart: unless-stopped
    volumes:
      - ./monitoring/promtail:/etc/promtail
      - /var/log:/var/log
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
    command: -config.file=/etc/promtail/promtail-config.yml
    networks:
      - freecompute
    labels:
      - "freecompute.service=promtail"
      - "freecompute.node=${NODE_NAME:-freecompute-node}"
    depends_on:
      - loki

  node-exporter:
    image: prom/node-exporter:latest
    container_name: freecompute-node-exporter
    restart: unless-stopped
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--path.rootfs=/rootfs'
      - '--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($$|/)'
    ports:
      - "9100:9100"
    networks:
      - freecompute
    labels:
      - "freecompute.service=node-exporter"
      - "freecompute.node=${NODE_NAME:-freecompute-node}"

# End of services

networks:
  freecompute:
    name: freecompute-network
    driver: bridge
    driver_opts:
      com.docker.network.enable_ipv6: "false"
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16
